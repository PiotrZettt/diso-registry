// Prisma schema for multitenant DeFi ISO Registry
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tenants - The core of our multitenant architecture
model Tenant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  domain    String?  @unique
  subdomain String?  @unique
  status    TenantStatus @default(ACTIVE)
  plan      TenantPlan   @default(BASIC)
  
  // Branding configuration
  branding  Json?
  
  // Settings configuration
  settings  Json?
  
  // Blockchain configuration
  blockchain Json?
  
  // Contact information
  contactInfo Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  users         TenantUser[]
  certificates  Certificate[]
  invitations   TenantInvitation[]
  transactions  BlockchainTransaction[]
  
  @@map("tenants")
}

// Tenant users with role-based access control
model TenantUser {
  id         String   @id @default(cuid())
  tenantId   String
  email      String
  firstName  String
  lastName   String
  role       UserRole
  status     UserStatus @default(PENDING)
  permissions Json? // Additional permissions beyond role
  lastLoginAt DateTime?
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  tenant     Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Ensure unique email per tenant
  @@unique([tenantId, email])
  @@map("tenant_users")
}

// Tenant invitations
model TenantInvitation {
  id        String   @id @default(cuid())
  tenantId  String
  email     String
  role      UserRole
  invitedBy String
  token     String   @unique
  expiresAt DateTime
  status    InvitationStatus @default(PENDING)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  tenant    Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("tenant_invitations")
}

// ISO Certificates with tenant isolation
model Certificate {
  id                String   @id @default(cuid())
  tenantId          String   // Tenant isolation
  certificateNumber String
  issuerName        String
  issuerCode        String
  
  // Organization details as JSON
  organization      Json
  
  // ISO Standard details as JSON
  standard          Json
  
  // Certificate lifecycle
  issuedDate        DateTime
  expiryDate        DateTime
  suspendedDate     DateTime?
  revokedDate       DateTime?
  status            CertificateStatus @default(VALID)
  
  // Audit information as JSON
  auditInfo         Json
  
  // Scope of certification as JSON
  scope             Json
  
  // Blockchain references as JSON
  blockchain        Json?
  
  // Documents as JSON
  documents         Json?
  
  // Metadata as JSON
  metadata          Json
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  tenant            Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Ensure unique certificate number per tenant
  @@unique([tenantId, certificateNumber])
  @@index([tenantId, status])
  @@index([tenantId, standard])
  @@index([expiryDate])
  @@map("certificates")
}

// Blockchain transactions with tenant context
model BlockchainTransaction {
  id           String   @id @default(cuid())
  tenantId     String
  type         TransactionType
  hash         String   @unique
  network      BlockchainNetwork
  status       TransactionStatus @default(PENDING)
  blockNumber  Int?
  gasUsed      Int?
  fee          String?
  data         Json
  
  createdAt    DateTime @default(now())
  confirmedAt  DateTime?
  
  // Relations
  tenant       Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@index([tenantId, status])
  @@index([hash])
  @@map("blockchain_transactions")
}

// IPFS documents with tenant context
model IPFSDocument {
  id            String   @id @default(cuid())
  tenantId      String
  hash          String   @unique
  name          String
  size          Int
  mimeType      String
  certificateId String?
  uploadedAt    DateTime @default(now())
  
  @@index([tenantId])
  @@index([certificateId])
  @@map("ipfs_documents")
}

// Multi-signature operations
model MultiSigOperation {
  id                  String   @id @default(cuid())
  tenantId            String
  type                String
  data                Json
  requiredSignatures  Int
  signatures          Json
  status              MultiSigStatus @default(PENDING)
  expiresAt           DateTime
  createdBy           String
  
  createdAt           DateTime @default(now())
  executedAt          DateTime?
  
  @@index([tenantId, status])
  @@map("multisig_operations")
}

// Audit logs for compliance
model AuditLog {
  id        String   @id @default(cuid())
  tenantId  String
  userId    String?
  action    String
  resource  String
  resourceId String?
  details   Json?
  ipAddress String?
  userAgent String?
  
  createdAt DateTime @default(now())
  
  @@index([tenantId, createdAt])
  @@index([userId])
  @@index([action])
  @@map("audit_logs")
}

// API keys for tenant API access
model ApiKey {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  key         String   @unique
  permissions Json
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([tenantId])
  @@map("api_keys")
}

// Enums
enum TenantStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum TenantPlan {
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum UserRole {
  TENANT_ADMIN
  CERTIFICATION_BODY
  AUDITOR
  OPERATOR
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

enum CertificateStatus {
  VALID
  EXPIRED
  SUSPENDED
  REVOKED
  PENDING
  DRAFT
}

enum TransactionType {
  CREATE_CERTIFICATE
  UPDATE_STATUS
  CREATE_TENANT
  UPDATE_TENANT
}

enum BlockchainNetwork {
  TEZOS
  ETHERLINK
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum MultiSigStatus {
  PENDING
  EXECUTED
  REJECTED
  EXPIRED
}
