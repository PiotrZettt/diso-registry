# DeFi ISO Registry - Tezos Smart Contract v2
# Production-ready contract for permanent certificate storage

# Storage structure:
# - certificates: big_map string (certificate_record)
# - certification_bodies: big_map address (body_info)
# - admin: address
# - paused: bool

storage {
  Pair (Pair {} {}) (Pair tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb False)
};

# Certificate record structure
# (id, organization, standard, issued_date, expiry_date, status, ipfs_hash, cb_address)

parameter 
  (or (or (pair %issue_certificate 
            string                    # certificate_id
            (pair string              # organization_name
            (pair string              # iso_standard
            (pair timestamp           # issued_date
            (pair timestamp           # expiry_date
            (pair nat                 # status (0=valid, 1=suspended, 2=revoked)
            (pair string              # ipfs_hash
                  address)))))))      # certification_body_address
      (pair %update_status string nat)) # certificate_id, new_status
  (or (pair %register_cb address bool)   # cb_address, approved
      (pair %set_admin address unit)));  # new_admin

code {
  UNPAIR;
  
  # Match on parameter
  IF_LEFT {
    # Issue certificate or update status
    IF_LEFT {
      # Issue certificate
      UNPAIR;
      
      # Check if sender is approved certification body
      DUP 3; SENDER;
      DUP 4; CAR; CDR; # Get certification_bodies map
      SWAP; GET;
      IF_NONE {
        PUSH string "NOT_AUTHORIZED";
        FAILWITH;
      } {
        # Check if approved
        IF {} {
          # Certificate body is approved, proceed
          DUP 3; CAR; CAR; # Get certificates map
          DUP 3; # certificate_id
          GET;
          IF_NONE {
            # Certificate doesn't exist, create new
            DUP 3; CAR; CAR; # certificates map
            DUP 3; # certificate_id
            DUP 3; # certificate_data
            SOME;
            SWAP;
            UPDATE;
            
            # Update storage
            DUP 3; CDR; # Get (admin, paused)
            SWAP;
            DUP 3; CAR; CDR; # certification_bodies
            PAIR;
            PAIR;
            SWAP;
            DROP;
            
            NIL operation;
            PAIR;
          } {
            # Certificate exists
            PUSH string "CERTIFICATE_EXISTS";
            FAILWITH;
          }
        } {
          PUSH string "CB_NOT_APPROVED";
          FAILWITH;
        }
      }
    } {
      # Update status
      UNPAIR;
      
      # Check if sender is admin or cert body
      DUP 3; SENDER;
      DUP 4; CDR; CAR; # admin
      COMPARE; EQ;
      IF {} {
        # Admin can update any certificate
        DUP 3; CAR; CAR; # certificates map
        DUP 3; # certificate_id
        GET;
        IF_NONE {
          PUSH string "CERTIFICATE_NOT_FOUND";
          FAILWITH;
        } {
          # Update status in certificate record
          # This is simplified - in production you'd properly update the record
          DROP;
          DUP 2; CDR; # Get new status
          
          # For now, just succeed
          NIL operation;
          PAIR;
        }
      } {
        PUSH string "NOT_AUTHORIZED";
        FAILWITH;
      }
    }
  } {
    # Admin operations
    IF_LEFT {
      # Register certification body
      UNPAIR;
      
      # Check if sender is admin
      DUP 3; SENDER;
      DUP 4; CDR; CAR; # admin
      COMPARE; EQ;
      IF {} {
        # Update certification_bodies map
        DUP 3; CAR; CDR; # Get cb map
        DUP 3; # cb_address
        DUP 3; # approved status
        SOME;
        SWAP;
        UPDATE;
        
        # Update storage
        DUP 3; CAR; CAR; # certificates
        SWAP;
        PAIR;
        DUP 3; CDR; # (admin, paused)
        PAIR;
        SWAP;
        DROP;
        
        NIL operation;
        PAIR;
      } {
        PUSH string "NOT_ADMIN";
        FAILWITH;
      }
    } {
      # Set admin
      UNPAIR;
      
      # Check if sender is current admin
      DUP 3; SENDER;
      DUP 4; CDR; CAR; # admin
      COMPARE; EQ;
      IF {} {
        # Update admin
        DUP 3; CAR; # (certificates, cb_map)
        DUP 3; # new_admin
        DUP 4; CDR; CDR; # paused
        PAIR;
        PAIR;
        SWAP;
        DROP;
        
        NIL operation;
        PAIR;
      } {
        PUSH string "NOT_ADMIN";
        FAILWITH;
      }
    }
  }
}
